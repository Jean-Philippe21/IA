{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ioY2B00Dpc73"
   },
   "source": [
    "# Data visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data.shape:(150, 4)\n",
      "target.shape:(150,)\n",
      "iris.target_names : ['setosa' 'versicolor' 'virginica']\n"
     ]
    }
   ],
   "source": [
    "# Load iris dataset\n",
    "import sklearn\n",
    "from sklearn.datasets import load_iris\n",
    "iris = load_iris()\n",
    "\n",
    "print(f\"data.shape:{iris.data.shape}\")\n",
    "print(f\"target.shape:{iris.target.shape}\")\n",
    "print(f\"iris.target_names : {iris.target_names}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Iris data set in 2d space visualization\n",
    "\n",
    "The histogeram of each feature shows the distribution of features for each class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"https://github.com/pranaymethuku/classical-ml/raw/master/result-plots/knn_classification.png\" width=1000 height=1000 />\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data.shape after PCA :(150, 2)\n"
     ]
    }
   ],
   "source": [
    "# import PCA from sklearn\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "pca = PCA(n_components=2)\n",
    "pca.fit(iris.data)\n",
    "X_r =pca.transform(iris.data)\n",
    "print(f\"data.shape after PCA :{X_r.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.36138659, -0.08452251,  0.85667061,  0.3582892 ],\n",
       "       [ 0.65658877,  0.73016143, -0.17337266, -0.07548102]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Principal axes in feature space, representing the directions of maximum variance in the data\n",
    "pca.components_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.92461872, 0.05306648])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Percentage of variance explained by each of the selected components\n",
    "pca.explained_variance_ratio_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'PCA of IRIS dataset with 2 components')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure()\n",
    "colors = ['navy', 'turquoise', 'darkorange']\n",
    "lw = 2\n",
    "\n",
    "for color, i, iris.target_name in zip(colors, [0, 1, 2], iris.target_names):\n",
    "    plt.scatter(X_r[iris.target == i, 0], X_r[iris.target == i, 1], color=color, alpha=.8, lw=lw,\n",
    "                label=iris.target_name)\n",
    "plt.legend(loc='best', shadow=False, scatterpoints=1)\n",
    "plt.title('PCA of IRIS dataset with 2 components')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Question</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; What is the difference of having only one component and having 3 components?</h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Answer</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; Based on below code using 3 components will cover 99% of variance while using the first best component cover 92% of variance. </h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total variance explained by 3 main components 0.9947878161267247\n",
      "The total variance explained by only one best component 0.9246187232017271\n"
     ]
    }
   ],
   "source": [
    "# Answer\n",
    "pca_all = PCA(n_components=4)\n",
    "pca_all.fit(iris.data)\n",
    "X_r =pca_all.transform(iris.data)\n",
    "print(\"The total variance explained by 3 main components\",sum(pca_all.explained_variance_ratio_[:3]))\n",
    "print(\"The total variance explained by only one best component\",pca_all.explained_variance_ratio_[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# t-SNE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150, 2)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.manifold import TSNE\n",
    "\n",
    "X_embedded = TSNE(n_components=2).fit_transform(iris.data)\n",
    "\n",
    "X_embedded.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 't-SNE of IRIS dataset with 2 components')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure()\n",
    "colors = ['navy', 'turquoise', 'darkorange']\n",
    "lw = 2\n",
    "\n",
    "for color, i, iris.target_name in zip(colors, [0, 1, 2], iris.target_names):\n",
    "    plt.scatter(X_embedded[iris.target == i, 0], X_embedded[iris.target == i, 1], color=color, alpha=.8, lw=lw,\n",
    "                label=iris.target_name)\n",
    "plt.legend(loc='best', shadow=False, scatterpoints=1)\n",
    "plt.title('t-SNE of IRIS dataset with 2 components')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Question</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; Run t-SNE algorithm on IRIS dataset several time and check the visualization. Why is the result different?</h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Answer</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; Unlike PCA which is deterministic, tSNE is an iterative algorithm that use random initialization which results in different output for each run. In a case of reproducibility, use random_state={an integer number} option.</h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Exercise</h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Go to the projector website: https://projector.tensorflow.org/\n",
    "\n",
    "2. Select Mnist dataset (which is image of hand writting digits More info in http://yann.lecun.com/exdb/mnist/ )\n",
    "\n",
    "3. Select PCA and set Color by, label by to \"label\".\n",
    "\n",
    "4. By activating checkbox of 3rd component in left below find the different of variance coverage in the case of using 2 components and 3 components?\n",
    "\n",
    "5. Select t-SNE mode see the process.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wine.shape:(178, 13)\n",
      "wine.shape:(178,)\n",
      "wine.target_names : ['class_0' 'class_1' 'class_2']\n"
     ]
    }
   ],
   "source": [
    "# load and save wine data set from sklearn in your local system\n",
    "\n",
    "from sklearn.datasets import load_wine\n",
    "wine = load_wine()\n",
    "\n",
    "print(f\"wine.shape:{wine.data.shape}\")\n",
    "print(f\"wine.shape:{wine.target.shape}\")\n",
    "print(f\"wine.target_names : {wine.target_names}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save wine data set in tsv format\n",
    "# one file for data features and one file for target label\n",
    "\n",
    "import csv\n",
    "with open('wine_data.tsv', 'w') as tsvfile:\n",
    "    writer = csv.writer(tsvfile, delimiter='\\t')\n",
    "    for s in range(len(wine.data)):\n",
    "        record=[]\n",
    "        for feature in wine.data[s]:\n",
    "            record.append(feature)\n",
    "        writer.writerow(record)\n",
    "        \n",
    "with open('wine_target.tsv', 'w') as tsvfile:\n",
    "    writer = csv.writer(tsvfile, delimiter='\\t')\n",
    "    for s in range(len(wine.data)):\n",
    "        record=[]\n",
    "        record.append(wine.target[s])\n",
    "        writer.writerow(record)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Load the saved file in projector.tensorflow : In Step 1 (Load a TSV file of vectors) select wine_data.tsv ans in Step 2 (Load a TSV file of metadata) select wine_target.tsv\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# creat a toy dataset with 1500 samples and 3 classes\n",
    "from sklearn.datasets import make_blobs\n",
    "\n",
    "n_samples = 1500\n",
    "random_state = 1760\n",
    "toy_X, toy_y = make_blobs(n_samples=n_samples, random_state=random_state)\n",
    "\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "plt.scatter(toy_X[:, 0], toy_X[:, 1],c=toy_y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**In Scikit Learnm there are two functions that will be use for train and/or predict:**\n",
    "\n",
    "**fit(inputs)** : Fit (train) the model from features\n",
    "\n",
    "**fit_predict(inputs)** : Fit (train) and return the result of each sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# modeling data with K-Means \n",
    "\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "kmeans = KMeans(n_clusters=3)\n",
    "kmeans.fit_predict(toy_X)\n",
    "toy_y_pred = kmeans.predict(toy_X)\n",
    "\n",
    "plt.scatter(toy_X[:, 0], toy_X[:, 1],c=toy_y_pred)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of K-Means with 3 clusters: 0.0\n"
     ]
    }
   ],
   "source": [
    "# Since we know the real class the clustering performance can be calculated according to accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "print(\"Accuracy of K-Means with 3 clusters:\",accuracy_score(toy_y, toy_y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Question</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; Why is the accuracy of clustering low?</h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Answer</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; In cluster modeling, we do not assign the real label to clusters. Our cluster label can be interpert like cluster a,b, and c.</h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy : 0.3333333333333333\n",
      "[[54  0]\n",
      " [ 0 18]]\n"
     ]
    }
   ],
   "source": [
    "# Use pair_confusion_matrix for clustering evaluation\n",
    "from sklearn.metrics.cluster import pair_confusion_matrix\n",
    "\n",
    "# Example:\n",
    "cluster_label_1= [0,0,0,1,1,1,2,2,2]\n",
    "cluster_label_2= [1,1,1,0,0,0,2,2,2]\n",
    "\n",
    "print(\"Accuracy :\",accuracy_score(cluster_label_1, cluster_label_2))\n",
    "\n",
    "print(pair_confusion_matrix(cluster_label_1, cluster_label_2))\n",
    "# C[0,0] : number of pairs with both clusterings having the samples not clustered together\n",
    "# C[0,1]  : number of pairs with the true label clustering having the samples clustered together but the other clustering not having the samples clustered together\n",
    "# C[1,0]  : number of pairs with the true label clustering not having the samples clustered together but the other clustering having the samples clustered together\n",
    "# C[1,1]  : number of pairs with both clusterings having the samples clustered together"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Exercise</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; Write a function and calculate the real accuracy of above K-Means clustering</h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Answer</h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of K-Means with 3 cluster: 0.99911140760507\n"
     ]
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
    "from sklearn.metrics.cluster import pair_confusion_matrix\n",
    "\n",
    "def clustering_acc(y, y_pred):\n",
    "    \n",
    "    c_matrix=pair_confusion_matrix(y, y_pred)\n",
    "\n",
    "    return (c_matrix[0,0]+c_matrix[1,1])/sum(sum(c_matrix))\n",
    "\n",
    "print(\"Accuracy of K-Means with 3 cluster:\",clustering_acc(toy_y, toy_y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Silhouette score of K-Means with 3 cluster: 0.7316031086775127\n",
      "Davies Bouldin score of K-Means with 3 cluster: 0.37421737708988195\n"
     ]
    }
   ],
   "source": [
    "# Calculate the Silhouette score (lower values indicating better clustering) and Davies Bouldin score (The best value is 1 and the worst value is -1)\n",
    "\n",
    "from sklearn.metrics import silhouette_score\n",
    "from sklearn.metrics import davies_bouldin_score\n",
    "\n",
    "print(\"Silhouette score of K-Means with 3 cluster:\",silhouette_score(toy_X, toy_y_pred))\n",
    "print(\"Davies Bouldin score of K-Means with 3 cluster:\",davies_bouldin_score(toy_X, toy_y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Exercise</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; 1. Calculate Silhouette and Davies Bouldin score for K-Means clustering with 2, 4 clusters? </h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; 2. According to these evaluation metrics, what is the best cluster number (between 2 and 4)?</h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "K-Means with 2 cluster: Silhouette=0.6309140777535792, and Davies Bouldin =0.5345880661758997\n",
      "K-Means with 4 cluster: Silhouette=0.5776763728377179, and Davies Bouldin =0.8248339413077658\n"
     ]
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
    "for k in [2,4]:\n",
    "\n",
    "    kmeans = KMeans(n_clusters=k)\n",
    "    kmeans.fit_predict(toy_X)\n",
    "    toy_y_pred = kmeans.predict(toy_X)\n",
    "    \n",
    "    print(f\"K-Means with {k} cluster: Silhouette={silhouette_score(toy_X, toy_y_pred)}, and Davies Bouldin ={davies_bouldin_score(toy_X, toy_y_pred)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Answer</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; 2. K-Means with 2 cluster achieve higher Silhouette and lower Davies Bouldin score which means 2 clusters would be more dense and more separated than 4 clusters. Based on the initial visualization also it can be confirmed that data can be clustered in 2 clusters. </h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Exercise</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; 1. Creat a Agglomerative Clustering model   </h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; 2. Calculate the accuracy and number of clusters of model with different distance_threshold = [1,10,100,200,400] </h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distance threshold = 1 : Number of clusters: 180 , Clustering accuracy: 67.37682899710919%\n",
      "Distance threshold = 10 : Number of clusters: 19 , Clustering accuracy: 72.48040916166333%\n",
      "Distance threshold = 100 : Number of clusters: 3 , Clustering accuracy: 99.911140760507%\n",
      "Distance threshold = 200 : Number of clusters: 2 , Clustering accuracy: 77.762953079831%\n",
      "Distance threshold = 400 : Number of clusters: 1 , Clustering accuracy: 33.28885923949299%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.cluster import AgglomerativeClustering\n",
    "\n",
    "# Number of clusters can be found with len(set(toy_y_pred))\n",
    "\n",
    "# hac_clustering = AgglomerativeClustering(n_clusters=None,distance_threshold={thr})\n",
    "\n",
    "# Solution\n",
    "\n",
    "for thrsh_dist in [1,10,100,200,400]:\n",
    "    hac_clustering = AgglomerativeClustering(n_clusters=None,distance_threshold=thrsh_dist)\n",
    "    toy_y_pred=hac_clustering.fit_predict(toy_X)\n",
    "    print(f\"Distance threshold = {thrsh_dist} : Number of clusters: {len(set(toy_y_pred))} , Clustering accuracy: {100*clustering_acc(toy_y, toy_y_pred)}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Exercise Wine Quality</h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "About Wine Quality Dataset:\n",
    "    \n",
    "Input variables (based on physicochemical tests):\n",
    "\n",
    "1. fixed acidity\n",
    "2. volatile acidity\n",
    "3. citric acid\n",
    "4. residual sugar\n",
    "5. chlorides\n",
    "6. free sulfur dioxide\n",
    "7. total sulfur dioxide\n",
    "8. density\n",
    "9. pH\n",
    "10. sulphates\n",
    "11. alcohol\n",
    "\n",
    "Output variable (based on sensory data):\n",
    "\n",
    "12. quality (score between 0 and 10)\n",
    "\n",
    "\n",
    "More information on this [link](https://archive.ics.uci.edu/ml/datasets/wine+quality) and this [reference](https://www.sciencedirect.com/science/article/pii/S0167923609001377?via%3Dihub)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "winequality_x.shape:(1599, 11)\n",
      "winequality_y.shape:(1599,)\n"
     ]
    }
   ],
   "source": [
    "# Load data set:\n",
    "\n",
    "import numpy as np\n",
    "import csv\n",
    "\n",
    "with open(\"winequality-red.csv\") as f_input:\n",
    "    csvreader = csv.reader(f_input,delimiter=';')\n",
    "    header = next(csvreader)\n",
    "    winequality_data=np.array([list(map(float, row)) for row in csvreader])\n",
    "\n",
    "winequality_x=winequality_data[:,:11]\n",
    "winequality_y=winequality_data[:,11]\n",
    "print(f\"winequality_x.shape:{winequality_x.shape}\")\n",
    "print(f\"winequality_y.shape:{winequality_y.shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; 1. Divide randomly data into train (80%) and test (20%) </h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; 2. Creat a Gaussian Naive Bayes,an SVM, and a Random Forest Classification model and compare their classification accuracy</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; 3. Find the best option for max_depth (the maximum depth of the tree) in Random Forest (try 1,2,3,4,5)</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; 4. Since the target value (quality score) is numerical, the problem can be model with as regression. Creat a RandomForestRegressor model and calculate the RMSE of predicted values with max_depth=5</h1>\n",
    "    <h1 style=\"text-align: left; color:#000; font-family:Georgia; font-size:18px;\"> &emsp; 5. Round the output of regressor model and evaluate the accuracy of values as classification label</h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Information about training, prediction, and scoring times:\n",
      "gs.cv_results_.['mean_fit_time']: [0.22449574 0.27408147 0.32575622 0.3761476  0.42782931]\n",
      "gs.cv_results_.['std_fit_time']: [0.0026109  0.00148087 0.00310924 0.00274699 0.00149134]\n",
      "gs.cv_results_.['std_score_time']: [9.73624414e-05 6.06056839e-05 1.99499025e-04 1.11920152e-04\n",
      " 2.75531455e-04]\n",
      "\n",
      "Information about score of each hyperparameter:\n",
      "gs.cv_results_.['mean_test_score']: [0.14884427 0.22885326 0.28829421 0.3109958  0.32612938]\n",
      "gs.cv_results_.['std_test_score']: [0.06123122 0.08953559 0.07026348 0.06406878 0.06091724]\n",
      "\n",
      "Ranking of the best hyperparameter:\n",
      "gs.cv_results_.['rank_test_score']: [5 4 3 2 1]\n"
     ]
    }
   ],
   "source": [
    "# Grid Search\n",
    "#The parameters of the model are optimized by cross-validated grid-search over a parameter grid\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "param_grid = {'max_depth':[1,2,3,4,5]} # a dictionary of all variables ans correspond values as list that supposed to be optimized\n",
    "\n",
    "rfr = RandomForestRegressor(random_state=0) # this model called estimator\n",
    "gs = GridSearchCV(estimator=rfr, param_grid=param_grid)\n",
    "gs.fit(winequality_x,winequality_y) # train and scoring with all data\n",
    "\n",
    "print(\"Information about training, prediction, and scoring times:\")\n",
    "print(\"gs.cv_results_.['mean_fit_time']:\",gs.cv_results_['mean_fit_time'])\n",
    "print(\"gs.cv_results_.['std_fit_time']:\",gs.cv_results_['std_fit_time'])\n",
    "print(\"gs.cv_results_.['std_score_time']:\",gs.cv_results_['std_score_time'])\n",
    "\n",
    "print(\"\\nInformation about score of each hyperparameter:\")\n",
    "print(\"gs.cv_results_.['mean_test_score']:\",gs.cv_results_['mean_test_score'])\n",
    "print(\"gs.cv_results_.['std_test_score']:\",gs.cv_results_['std_test_score'])\n",
    "\n",
    "print(\"\\nRanking of the best hyperparameter:\")\n",
    "print(\"gs.cv_results_.['rank_test_score']:\",gs.cv_results_['rank_test_score'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: solid 3px #000;\">\n",
    "    <h1 style=\"text-align: center; color:#000; font-family:Georgia; font-size:26px;\">Answer</h1>\n",
    "    <p style='text-align: left;'> </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of Gaussian Naive Bayes: 0.55\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/lium/buster1/mshamsi/miniconda/envs/env_s4d_modif/lib/python3.6/site-packages/sklearn/svm/_base.py:986: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of SVM: 0.5\n",
      "Accuracy of Random Forest classifier: 0.58125\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.svm import LinearSVC\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "#Solution\n",
    "\n",
    "# 1. Divide randomly data into train (80%) and test (20%)\n",
    "wine_train, wine_test, quality_train, quality_test = train_test_split(winequality_x,\n",
    "                                                                    winequality_y,\n",
    "                                                                    test_size=0.2,\n",
    "                                                                    shuffle=True,\n",
    "                                                                    random_state=22)\n",
    "\n",
    "# 2. Creat a Gaussian Naive Bayes,an SVM, and a Random Forest Classification model and compare their classification accuracy\n",
    "\n",
    "gnb = GaussianNB()\n",
    "pred_quality_test = gnb.fit(wine_train, quality_train).predict(wine_test)\n",
    "print(\"Accuracy of Gaussian Naive Bayes:\", accuracy_score(quality_test, pred_quality_test))\n",
    "\n",
    "svm = LinearSVC(random_state=10)\n",
    "pred_quality_test = svm.fit(wine_train, quality_train).predict(wine_test)\n",
    "print(\"Accuracy of SVM:\", accuracy_score(quality_test, pred_quality_test))\n",
    "\n",
    "rfc = RandomForestClassifier(max_depth=2, random_state=10)\n",
    "pred_quality_test = rfc.fit(wine_train, quality_train).predict(wine_test)\n",
    "print(\"Accuracy of Random Forest classifier:\", accuracy_score(quality_test, pred_quality_test))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of Random Forest with maximum depth 1: 0.575\n",
      "Accuracy of Random Forest with maximum depth 2: 0.58125\n",
      "Accuracy of Random Forest with maximum depth 3: 0.609375\n",
      "Accuracy of Random Forest with maximum depth 4: 0.621875\n",
      "Accuracy of Random Forest with maximum depth 5: 0.63125\n"
     ]
    }
   ],
   "source": [
    "# 3. Find the best option for max_depth (the maximum depth of the tree) in Random Forest (try 1,2,3,4,5)\n",
    "for md in [1,2,3,4,5]:\n",
    "    rf = RandomForestClassifier(max_depth=md, random_state=0)\n",
    "    pred_quality_test = rf.fit(wine_train, quality_train).predict(wine_test)\n",
    "    print(f\"Accuracy of Random Forest with maximum depth {md}:\", accuracy_score(quality_test, pred_quality_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE of Random Forest regressor: 0.5916232477748431\n"
     ]
    }
   ],
   "source": [
    "# 4. Since the target value (quality score) is numerical, the problem can be model with as regression. Creat a RandomForestRegressor model and calculate the RMSE of predicted values with max_depth=5\n",
    "\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "def rms_error(predicted_y,y):\n",
    "    \n",
    "    if len(predicted_y)!= len(y):\n",
    "        print(\"Error: The length of real target and predicted target are not the same!\")\n",
    "        return None\n",
    "    \n",
    "    ms_error=0\n",
    "    for i in range(len(y)):\n",
    "        ms_error+=(predicted_y[i]-y[i])**2\n",
    "        \n",
    "    return np.sqrt(ms_error/len(y))\n",
    "\n",
    "rfr = RandomForestRegressor(max_depth=5, random_state=0)\n",
    "pred_quality_test = rfr.fit(wine_train, quality_train).predict(wine_test)\n",
    "print(\"RMSE of Random Forest regressor:\", rms_error(quality_test, pred_quality_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of Random Forest regressor: 0.6125\n"
     ]
    }
   ],
   "source": [
    "# 5. Round the output of regressor model and evaluate the accuracy of values as classification label\n",
    "print(\"Accuracy of Random Forest regressor:\", accuracy_score(quality_test, np.round(pred_quality_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyMXu/Xa6MF0yc+bV9NwvLEg",
   "name": "TD_2 - Intro AI.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
